import { z } from "zod/v4";
import {
  claimId,
  subscriberId,
  memberSequence,
  claimStatus,
  billed,
  allowed,
  paid,
  paymentStatusDate,
  serviceDate,
  receivedDate,
  entryDate,
  processedDate,
  paidDate,
  paymentStatus,
  groupName,
  groupId,
  divisionName,
  divisionId,
  plan,
  planId,
  placeOfService,
  claimType,
  procedureCode,
  memberGender,
  providerId,
  providerName,
  claimStatusEnum,
  divisionNameEnum,
  divisionIdEnum,
  planEnum,
  planIdEnum,
  placeOfServiceEnum,
  claimTypeEnum,
  memberGenderEnum,
  paymentStatusEnum,
} from "~/utils/constants";

export const CsvRowSchema = z.object({
  [claimId]: z.string(),
  [subscriberId]: z.string(),
  [memberSequence]: z.coerce.number().int().min(0).max(9),
  [claimStatus]: z.enum(claimStatusEnum).nullish(),
  [billed]: z.coerce.number().refine((val) => Number.isFinite(val)),
  [allowed]: z.coerce.number().refine((val) => Number.isFinite(val)),
  [paid]: z.coerce.number().refine((val) => Number.isFinite(val)),
  [paymentStatusDate]: z.date(),
  [serviceDate]: z.date(),
  [receivedDate]: z.date(),
  [entryDate]: z.date(),
  [processedDate]: z.date(),
  [paidDate]: z.date(),
  [paymentStatus]: z.enum(paymentStatusEnum),
  [groupName]: z.string(),
  [groupId]: z.string(),
  [divisionName]: z.enum(divisionNameEnum),
  [divisionId]: z.enum(divisionIdEnum),
  [plan]: z.enum(planEnum),
  [planId]: z.enum(planIdEnum),
  [placeOfService]: z.enum(placeOfServiceEnum),
  [claimType]: z.enum(claimTypeEnum),
  [procedureCode]: z.string().length(5),
  [memberGender]: z.enum(memberGenderEnum),
  [providerId]: z.string(),
  [providerName]: z.string(),
});

export type CsvRow = z.infer<typeof CsvRowSchema>;
